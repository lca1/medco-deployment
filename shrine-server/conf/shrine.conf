shrine {
    pmEndpoint {
        url = "http://i2b2-server:8080/i2b2/services/PMService/getServices"
        timeout {
        seconds = 10
        }
    }

    ontEndpoint {
        url = "http://i2b2-server:8080/i2b2/services/OntologyService/"
    }

    hiveCredentials {
        # todo: parameters to take into account
        domain = ${I2B2_DOMAIN_NAME}
        username = "medcouser"
        password = ${ADMIN_PASSWORD}
        crcProjectId = "MedCo"
        ontProjectId = "MedCo-SHRINE"
    }

    queryEntryPoint {
        create = true
        includeAggregateResults = false
        maxQueryWaitTime {
            minutes = 5
        }
        trustModelIsHub = true
        attachSigningCert = true

        authenticationType = "pm"
        authorizationType = "shrine-steward"

        shrineSteward {
            qepUserName = "AGG_SERVICE_ACCOUNT" // name of user the steward will submit queries as
            qepPassword = ${DB_PASSWORD}
            stewardBaseUrl = "https://shrine-server:6443" // typically hostname+port of Tomcat server running steward.war
        }
    }

    hub {
        create = true
        shouldQuerySelf = false

        maxQueryWaitTime {
            minutes = 4.5
        }

        downstreamNodes {
            include file("SHRINE_DOWNSTREAM_NODES_FILE_PATH")
        }
    }

    adapter {
        crcEndpoint {
            url = "http://i2b2-server:8080/i2b2/services/MedCoQueryService/"
        }

        setSizeObfuscation = false
        adapterMappingsFileName = "AdapterMappings.xml"

        # lockout disabled
        adapterLockoutAttemptsThreshold = 0

        maxSignatureAge {
            minutes = 5
        }

        //obfuscation {
        //binSize = 5 //by default. Round to the nearest binSize. Use 1 for no effect (to match SHRINE 1.21 and earlier).
        //sigma = 6.5 //by default. Noise to inject. Use 0 for no effect. (Use 1.33 to match SHRINE 1.21 and earlier).
        //clamp = 10 //by default. Maximum ammount of noise to inject. (Use 3 to match SHRINE 1.21 and earlier).
        //}

        // disabled
        botDefense {
            countsAndMilliseconds = [  //to turn off, use an empty json list
        //        {count = 10, milliseconds = 60000}, //allow up to 10 queries in one minute by default
        //        {count = 200, milliseconds = 36000000} //allow up to 200 queries in 10 hours by default
            ]
        }
    }

    networkStatusQuery = "\\\\ENCRYPTED_KEY\\TESTKEY\\"
    humanReadableNodeName = ${SHRINE_NODE_NAME}
    shrineDatabaseType = "mysql"

    keystore {
        file = ${CONF_DIR}/${SHRINE_KEYSTORE_NODE_ALIAS}.keystore
        password = ${ADMIN_PASSWORD}
        privateKeyAlias = ${SHRINE_KEYSTORE_NODE_ALIAS}-private
        keyStoreType = "JKS"
        caCertAliases = ["shrine-hub-ca"]


      // maps site alias (from downstream nodes) to the keystore alias
        #aliasMap = {
        #  include file("SHRINE_ALIAS_MAP_FILE_PATH")
        #}
    }

    breakdownResultOutputTypes {
        PATIENT_AGE_COUNT_XML {
            description = "Age patient breakdown"
        }

        PATIENT_RACE_COUNT_XML {
            description = "Race patient breakdown"
        }

        PATIENT_VITALSTATUS_COUNT_XML {
            description = "Vital Status patient breakdown"
        }

        PATIENT_GENDER_COUNT_XML {
            description = "Gender patient breakdown"
        }
    }

    steward {
        //Can be Pending, Approved, or TopcisIgnoredJustLog
        //Pending - new topics start in the Pending state; researchers must wait for the Steward to approve them
        //Approved - new topics start in the Approved state; researchers can use them immediately
        //TopicsIgnoredJustLog - all queries are logged and approved; researchers don't need to create topics
        createTopicsMode = Approved

        database {
            dataSourceFrom = "JNDI" // Can be JNDI or testDataSource. Use testDataSource for tests, JNDI everywhere else
            jndiDataSourceName = "java:comp/env/jdbc/stewardDB" //leave out for tests
            slickProfileClassName = "slick.driver.MySQLDriver$" // Can be scala.slick.driver.H2Driver$
                                                                      //        scala.slick.driver.MySQLDriver$
                                                                      //        scala.slick.driver.PostgresDriver$
                                                                      //        scala.slick.driver.SQLServerDriver$
                                                                      //        scala.slick.driver.JdbcDriver$
                                                                      //        com.typesafe.slick.driver.oracle.OracleDriver$
                                                                      //
                                                                      //        (Yes, with the $ on the end)
                                                                      //        Note that SQLServerDriver and OracleDriver are not included with
                                                                      //        Slick by default. Either use JdbcDriver, or experiment with the
                                                                      //        closed-source package at:
                                                                      //        http://slick.typesafe.com/doc/2.1.0/extensions.html

        }

        emailDataSteward {
          sendAuditEmails = false
            // todo: fill if emails necessary
        }
    }

    authenticate {
        usersource {
            domain = ${I2B2_DOMAIN_NAME}
        }
    }

    problem {
        problemHandler = "net.shrine.problem.LogAndDatabaseProblemHandler$"
    }

    dashboard {
        gruntWatch = false //false for production, true for mvn tomcat7:run . Allows the client javascript and html files to be loaded via gruntWatch .
        happyBaseUrl = "https://shrine-server:6443/shrine/rest/happy"
        statusBaseUrl = "https://shrine-server:6443/shrine/rest/internalstatus"

        database {
            dataSourceFrom = "JNDI" //Can be JNDI or testDataSource . Use testDataSource for tests, JNDI everywhere else
            jndiDataSourceName = "java:comp/env/jdbc/problemDB" //or leave out for tests
            slickProfileClassName = "slick.driver.MySQLDriver$" // Can be
            //        slick.driver.H2Driver$
            //        slick.driver.MySQLDriver$
            //        slick.driver.PostgresDriver$
            //        slick.driver.SQLServerDriver$
            //        slick.driver.JdbcDriver$
            //        freeslick.OracleProfile$
            //        freeslick.MSSQLServerProfile$
            //
            //        (Yes, with the $ on the end)

            createTablesOnStart = false //for testing with H2 in memory, when not running unit tests. Set to false normally
        }
    }

    metaData {
        // todo: put appropriate info
        siteAdminsContactInfo = ["admin1@example.com", "admin2@example.com"]
        dataStewardContactInfo = "data.steward@example.com"
    }

    email {
        // todo: fill if emails necessary
    }


    status {
      permittedHostOfOrigin = "shrine-server"
    }
}
