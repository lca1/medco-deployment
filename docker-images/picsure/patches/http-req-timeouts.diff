diff --git a/pic-sure-util/src/main/java/edu/harvard/dbmi/avillach/util/HttpClientUtil.java b/pic-sure-util/src/main/java/edu/harvard/dbmi/avillach/util/HttpClientUtil.java
index c1ea7e0..674f2c8 100644
--- a/pic-sure-util/src/main/java/edu/harvard/dbmi/avillach/util/HttpClientUtil.java
+++ b/pic-sure-util/src/main/java/edu/harvard/dbmi/avillach/util/HttpClientUtil.java
@@ -8,6 +8,7 @@ import edu.harvard.dbmi.avillach.util.exception.ResourceInterfaceException;
 import org.apache.commons.io.IOUtils;
 import org.apache.http.Header;
 import org.apache.http.HttpResponse;
+import org.apache.http.client.config.RequestConfig;
 import org.apache.http.client.methods.HttpGet;
 import org.apache.http.client.methods.HttpPost;
 import org.apache.http.entity.StringEntity;
@@ -34,10 +35,29 @@ import java.util.function.Predicate;
 import java.util.stream.Collectors;
 
 public class HttpClientUtil {
+
+	private static String HTTP_CLIENT_TIMEOUT_SECONDS = System.getenv("HTTP_CLIENT_TIMEOUT_SECONDS");
+
 	private final static ObjectMapper json = new ObjectMapper();
 
 	private final static Logger logger = LoggerFactory.getLogger(HttpClientUtil.class);
 
+	/**
+	 * @return new requestconfig for the HTTP client with timeouts set
+	 */
+	private static RequestConfig getNewRequestConfig() {
+		int timeout = 600;
+		try {
+			timeout = Integer.parseInt(HTTP_CLIENT_TIMEOUT_SECONDS);
+		} catch (NumberFormatException e) {
+			logger.error("error parsing HTTP_CLIENT_TIMEOUT_SECONDS, defaulted to 600s");
+		}
+
+		return RequestConfig.custom()
+				.setConnectTimeout(timeout * 1000)
+				.setConnectionRequestTimeout(timeout * 1000)
+				.setSocketTimeout(timeout * 1000).build();
+	}
 
 	public static HttpResponse retrieveGetResponse(String uri, List<Header> headers) {
 		return retrieveGetResponse(uri, headers.toArray(new Header[headers.size()]));
@@ -53,7 +73,7 @@ public class HttpClientUtil {
 		try {
             logger.debug("HttpClientUtil retrieveGetResponse()");
 
-			HttpClient client = HttpClientBuilder.create().build();
+			HttpClient client = HttpClientBuilder.create().setDefaultRequestConfig(getNewRequestConfig()).build();
             return simpleGet(client, uri, headers);
 		} catch (ApplicationException e) {
 			//TODO: Write custom exception
@@ -100,7 +120,7 @@ public class HttpClientUtil {
 		    	headerList = new ArrayList<>(Arrays.asList(headers));
 		    headerList.add(new BasicHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON));
 
-			HttpClient client = HttpClientBuilder.create().build();
+			HttpClient client = HttpClientBuilder.create().setDefaultRequestConfig(getNewRequestConfig()).build();
 		    return simplePost(uri, client, new StringEntity(body), headerList.toArray(new Header[headerList.size()]));
 		} catch (ApplicationException | UnsupportedEncodingException e) {
 			//TODO: Write custom exception
@@ -168,7 +188,7 @@ public class HttpClientUtil {
 			throws ApplicationException{
 
 		if (client == null)
-			client = HttpClientBuilder.create().build();
+			client = HttpClientBuilder.create().setDefaultRequestConfig(getNewRequestConfig()).build();
 
 		HttpPost post = new HttpPost(uri);
 		post.setHeaders(headers);
@@ -235,7 +255,7 @@ public class HttpClientUtil {
 			throws ApplicationException{
 
 		if (client == null)
-			client = HttpClientBuilder.create().build();
+			client = HttpClientBuilder.create().setDefaultRequestConfig(getNewRequestConfig()).build();
 
 		HttpGet get = new HttpGet(uri);
 		get.setHeaders(headers);
